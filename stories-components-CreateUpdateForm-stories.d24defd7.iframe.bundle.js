"use strict";(self.webpackChunk_weavingwebs_ww_react=self.webpackChunk_weavingwebs_ww_react||[]).push([[550],{"./src/stories/components/CreateUpdateForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CreateUpdateForm:()=>CreateUpdateForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),yup__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/yup/index.esm.js"),react_hook_form__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs"),_hookform_resolvers_yup__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("./node_modules/@hookform/resolvers/yup/dist/yup.mjs"),date_fns__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/date-fns/esm/parse/index.js"),date_fns__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/date-fns/esm/isValid/index.js"),date_fns__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("./node_modules/date-fns/esm/format/index.js"),date_fns_tz__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("./node_modules/date-fns-tz/esm/toDate/index.js"),date_fns_tz__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("./node_modules/date-fns-tz/esm/formatInTimeZone/index.js"),_weavingwebs_ww_react_next__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@weavingwebs/ww-react-next/dist/index.mjs"),_bootstrap_Button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/bootstrap/Button/index.tsx"),_mocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/stories/mocks/index.ts"),_bootstrap__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/bootstrap/index.ts"),_util_forms__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/util/forms.ts"),_hooks_useMemoOnce__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/hooks/useMemoOnce.ts"),_bootstrap_BsFormInput__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/bootstrap/BsFormInput/index.tsx"),_bootstrap_BsFormDate__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/bootstrap/BsFormDate/index.tsx"),_bootstrap_BsFormCheckbox__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./src/bootstrap/BsFormCheckbox/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/react/jsx-runtime.js");const fragmentToValues=(fragment,opts)=>{let dateOfBirth=null,expiresAt=null;if(fragment.dateOfBirth&&(dateOfBirth=(0,date_fns__WEBPACK_IMPORTED_MODULE_12__.Z)(fragment.dateOfBirth,"yyyy-MM-dd",new Date),!(0,date_fns__WEBPACK_IMPORTED_MODULE_13__.Z)(dateOfBirth)&&(dateOfBirth=null,!opts?.ignoreErrors)))throw new Error(`failed to parse dateOfBirth from '${fragment.dateOfBirth}'`);if(fragment.expiresAt&&(expiresAt=(0,date_fns_tz__WEBPACK_IMPORTED_MODULE_14__.Z)(fragment.expiresAt),!(0,date_fns__WEBPACK_IMPORTED_MODULE_13__.Z)(expiresAt)&&(expiresAt=null,!opts?.ignoreErrors)))throw new Error(`failed to parse expiresAt from '${fragment.expiresAt}'`);return{age:fragment.age,company:fragment.company,name:fragment.name,dateOfBirth,expiresAt,gender:fragment.gender||"",phone:fragment.phone,archived:fragment.archived}},validationSchema=(0,yup__WEBPACK_IMPORTED_MODULE_1__.Ry)({age:(0,yup__WEBPACK_IMPORTED_MODULE_1__.Rx)().label("Age").transform(_util_forms__WEBPACK_IMPORTED_MODULE_6__.We).positive().required(),company:(0,yup__WEBPACK_IMPORTED_MODULE_1__.Z_)().label("Company").required().max(128),dateOfBirth:(0,yup__WEBPACK_IMPORTED_MODULE_1__.hT)().label("Date of birth").required().transform(_util_forms__WEBPACK_IMPORTED_MODULE_6__.We),expiresAt:(0,yup__WEBPACK_IMPORTED_MODULE_1__.hT)().label("Expires at").required().transform(_util_forms__WEBPACK_IMPORTED_MODULE_6__.We),gender:(0,yup__WEBPACK_IMPORTED_MODULE_1__.nK)().oneOf(Object.values(_mocks__WEBPACK_IMPORTED_MODULE_4__.Y0)).label("Gender").transform(_util_forms__WEBPACK_IMPORTED_MODULE_6__.We).required(),name:(0,yup__WEBPACK_IMPORTED_MODULE_1__.Z_)().label("Name").required().max(128),phone:(0,yup__WEBPACK_IMPORTED_MODULE_1__.Z_)().label("Phone number").required(),archived:(0,yup__WEBPACK_IMPORTED_MODULE_1__.O7)().label("Archived").required()}),initialValues={name:"",phone:"",gender:"",company:"",age:null,archived:!1,dateOfBirth:null,expiresAt:null},CreateUpdateForm=({customer,onSubmit})=>{const[loadError,setLoadError]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),[submitError,setSubmitError]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),defaultValues=(0,_hooks_useMemoOnce__WEBPACK_IMPORTED_MODULE_7__.t)((()=>{if(!customer)return{...initialValues};try{return fragmentToValues(customer)}catch(err){return setLoadError(new Error("There were problems with loading some initial values",{cause:err})),fragmentToValues(customer,{ignoreErrors:!0})}})),formMethods=(0,react_hook_form__WEBPACK_IMPORTED_MODULE_17__.cI)({resolver:(0,_hookform_resolvers_yup__WEBPACK_IMPORTED_MODULE_18__.X)(validationSchema),defaultValues}),{handleSubmit,formState:{isSubmitting},reset}=formMethods;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(react_hook_form__WEBPACK_IMPORTED_MODULE_17__.RV,{...formMethods,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)("form",{noValidate:!0,onSubmit:handleSubmit((async values=>{setSubmitError(null),await onSubmit((values=>{if(!values.dateOfBirth)throw new Error("dateOfBirth is null");if(!values.expiresAt)throw new Error("expiresAt is null");if(!values.age)throw new Error("age is null");if(!values.gender)throw new Error("gender is ''");return{age:values.age,company:values.company,name:values.name,dateOfBirth:(0,date_fns__WEBPACK_IMPORTED_MODULE_15__.Z)(values.dateOfBirth,"yyyy-MM-dd"),expiresAt:(0,date_fns_tz__WEBPACK_IMPORTED_MODULE_16__.Z)(values.expiresAt,"UTC","yyyy-MM-dd'T'HH:mm:ss'Z'"),gender:values.gender,phone:values.phone,archived:values.archived}})(values)).catch((err=>{throw new Error("Failed to save values",{cause:err})})).then((res=>{try{reset(fragmentToValues(res))}catch(err){throw reset(values),new Error("Save successful but response was invalid",{cause:err})}})).catch(setSubmitError)})),children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_weavingwebs_ww_react_next__WEBPACK_IMPORTED_MODULE_2__.p1,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap__WEBPACK_IMPORTED_MODULE_5__.Bc,{error:loadError}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormInput__WEBPACK_IMPORTED_MODULE_8__.H,{required:!0,type:"text",name:"name",label:"Name",helpText:"Just some help text.",inputClassName:"form-control",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormInput__WEBPACK_IMPORTED_MODULE_8__.H,{required:!0,type:"text",name:"company",label:"Company",inputClassName:"form-control",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormInput__WEBPACK_IMPORTED_MODULE_8__.H,{required:!0,type:"tel",name:"age",label:"Age",inputClassName:"form-control",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormDate__WEBPACK_IMPORTED_MODULE_9__.o,{required:!0,name:"dateOfBirth",label:"Date of Birth",inputClassName:"form-control",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormDate__WEBPACK_IMPORTED_MODULE_9__.o,{required:!0,type:"datetime-local",name:"expiresAt",label:"Expires at",inputClassName:"form-control",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormInput__WEBPACK_IMPORTED_MODULE_8__.H,{required:!0,type:"tel",name:"phone",label:"Phone number",inputClassName:"form-control",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsxs)(_bootstrap_BsFormInput__WEBPACK_IMPORTED_MODULE_8__.H,{required:!0,as:"select",name:"gender",label:"Gender",inputClassName:"form-select",className:"mb-3",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)("option",{value:"",children:"Please select"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)("option",{value:"invalid",children:"Invalid option"}),Object.entries(_mocks__WEBPACK_IMPORTED_MODULE_4__.pG).map((([value,label])=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)("option",{value,children:label},value)))]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_BsFormCheckbox__WEBPACK_IMPORTED_MODULE_10__.F,{name:"archived",label:"Archived",className:"mb-3"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap__WEBPACK_IMPORTED_MODULE_5__.Bc,{error:submitError}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap_Button__WEBPACK_IMPORTED_MODULE_3__.z,{variant:"primary",type:"submit",disabled:isSubmitting,children:isSubmitting?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)(_bootstrap__WEBPACK_IMPORTED_MODULE_5__.gb,{colour:"light",size:"sm"}):"Submit"})]})})};CreateUpdateForm.displayName="CreateUpdateForm";const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:'import { Meta } from \'@storybook/react\';\nimport { FC, useState } from \'react\';\nimport { boolean, date, mixed, number, object, ObjectSchema, string } from \'yup\';\nimport { FormProvider, useForm } from \'react-hook-form\';\nimport { yupResolver } from \'@hookform/resolvers/yup\';\nimport { format, isValid, parse } from \'date-fns\';\nimport { formatInTimeZone, toDate } from \'date-fns-tz\';\nimport { PreventDirtyFormNavigate } from \'@weavingwebs/ww-react-next\';\nimport { Button } from \'../../bootstrap/Button\';\nimport { CustomerFragment, CustomerInput, Gender, GenderLabels } from \'../mocks\';\nimport { ErrorMessage, Loading } from \'../../bootstrap\';\n// @todo import from ww-react-next\nimport { transformEmptyToNull } from \'../../util/forms\';\nimport { useMemoOnce } from \'../../hooks/useMemoOnce\';\nimport { BsFormInput } from \'../../bootstrap/BsFormInput\';\nimport { BsFormDate } from \'../../bootstrap/BsFormDate\';\nimport { BsFormCheckbox } from \'../../bootstrap/BsFormCheckbox\';\n\n// Define the shape of the form values, overriding any props as needed for compatibility with HTML inputs.\ntype FormValues = Omit<CustomerInput, \'dateOfBirth\' | \'expiresAt\' | \'archived\' | \'age\' | \'gender\'> & {\n  // We don\'t want to default number to 0, we want it not set (for new).\n  age: number | null;\n  archived: boolean;\n  dateOfBirth: Date | null;\n  expiresAt: Date | null;\n  gender: Gender | \'\';\n};\n\n// Convert the real values to the form values.\nconst fragmentToValues = (fragment: CustomerFragment, opts?: {\n  ignoreErrors?: boolean;\n}): FormValues => {\n  let dateOfBirth: Date | null = null;\n  let expiresAt: Date | null = null;\n  if (fragment.dateOfBirth) {\n    dateOfBirth = parse(fragment.dateOfBirth, \'yyyy-MM-dd\', new Date());\n    if (!isValid(dateOfBirth)) {\n      dateOfBirth = null;\n      if (!opts?.ignoreErrors) {\n        throw new Error(`failed to parse dateOfBirth from \'${fragment.dateOfBirth}\'`);\n      }\n    }\n  }\n  if (fragment.expiresAt) {\n    // Must use toDate from date-fns-tz.\n    expiresAt = toDate(fragment.expiresAt);\n    if (!isValid(expiresAt)) {\n      expiresAt = null;\n      if (!opts?.ignoreErrors) {\n        throw new Error(`failed to parse expiresAt from \'${fragment.expiresAt}\'`);\n      }\n    }\n  }\n  return {\n    age: fragment.age,\n    company: fragment.company,\n    name: fragment.name,\n    dateOfBirth,\n    expiresAt,\n    gender: fragment.gender || \'\',\n    phone: fragment.phone,\n    archived: fragment.archived\n  };\n};\n\n// Convert the form values to the onSubmit input.\nconst valuesToInput = (values: FormValues): CustomerInput => {\n  // NOTE: empty fields *should* be dealt with by the form validation but our values argument type allows them so we\n  // must deal with it.\n  if (!values.dateOfBirth) {\n    throw new Error(\'dateOfBirth is null\');\n  }\n  if (!values.expiresAt) {\n    throw new Error(\'expiresAt is null\');\n  }\n  if (!values.age) {\n    throw new Error(\'age is null\');\n  }\n  if (!values.gender) {\n    throw new Error(`gender is \'\'`);\n  }\n  return {\n    age: values.age,\n    company: values.company,\n    name: values.name,\n    dateOfBirth: format(values.dateOfBirth, \'yyyy-MM-dd\'),\n    expiresAt: formatInTimeZone(values.expiresAt, \'UTC\', `yyyy-MM-dd\'T\'HH:mm:ss\'Z\'`),\n    gender: values.gender,\n    phone: values.phone,\n    archived: values.archived\n  };\n};\nconst validationSchema: ObjectSchema<FormValues> = object({\n  age: number().label(\'Age\').transform(transformEmptyToNull).positive().required(),\n  company: string().label(\'Company\').required().max(128),\n  dateOfBirth: date().label(\'Date of birth\').required().transform(transformEmptyToNull),\n  expiresAt: date().label(\'Expires at\').required().transform(transformEmptyToNull),\n  gender: mixed<Gender>().oneOf(Object.values(Gender)).label(\'Gender\').transform(transformEmptyToNull).required(),\n  name: string().label(\'Name\').required().max(128),\n  phone: string().label(\'Phone number\').required(),\n  // If not defined in initial values, it will block submit without warning.\n  archived: boolean().label(\'Archived\').required()\n});\nconst initialValues: FormValues = {\n  name: \'\',\n  phone: \'\',\n  gender: \'\',\n  company: \'\',\n  age: null,\n  archived: false,\n  dateOfBirth: null,\n  expiresAt: null\n};\ntype CreateUpdateFormProps = {\n  // If customer given, then it\'s an UpdateCustomer form, otherwise CreateCustomer.\n  customer: CustomerFragment | null;\n  // onCreate or onUpdate.\n  onSubmit: (input: CustomerInput) => Promise<CustomerFragment>;\n};\nexport const CreateUpdateForm: FC<CreateUpdateFormProps> = ({\n  customer,\n  onSubmit\n}) => {\n  const [loadError, setLoadError] = useState<Error | null>(null);\n  const [submitError, setSubmitError] = useState<Error | null>(null);\n  const defaultValues: FormValues = useMemoOnce(() => {\n    if (!customer) {\n      return {\n        ...initialValues\n      };\n    }\n\n    // Try and convert the values, if it fails then show the error & just parse what we can.\n    try {\n      return fragmentToValues(customer);\n    } catch (err) {\n      setLoadError(new Error(\'There were problems with loading some initial values\', {\n        cause: err\n      }));\n      return fragmentToValues(customer, {\n        ignoreErrors: true\n      });\n    }\n  });\n  const formMethods = useForm<FormValues>({\n    resolver: yupResolver(validationSchema),\n    defaultValues\n  });\n  const {\n    handleSubmit,\n    formState: {\n      isSubmitting\n    },\n    reset\n  } = formMethods;\n  return <FormProvider {...formMethods}>\n      <form\n    // We are validating using yup so we don\'t want HTML validation get in our way.\n    // e.g. setting type="email" or required would trigger HTML validation.\n    noValidate onSubmit={handleSubmit(async values => {\n      // Reset error every submit.\n      setSubmitError(null);\n      await onSubmit(valuesToInput(values)).catch(err => {\n        // Wrap save error explicitly.\n        throw new Error(\'Failed to save values\', {\n          cause: err\n        });\n      }).then(res => {\n        // Reset the \'default values\' to the newly saved values if save succeeded.\n        try {\n          reset(fragmentToValues(res));\n        } catch (err) {\n          // Fallback to resetting the defaults to the submitted values.\n          reset(values);\n          throw new Error(\'Save successful but response was invalid\', {\n            cause: err\n          });\n        }\n      }).catch(setSubmitError);\n    })}>\n        <PreventDirtyFormNavigate />\n        <ErrorMessage error={loadError} />\n\n        <BsFormInput<FormValues> required type="text" name="name" label="Name" helpText="Just some help text." inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required type="text" name="company" label="Company" inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required\n      // We use a \'tel\' for numbers so that mobile gets the numpad, it has no difference vs text on desktop.\n      type="tel" name="age" label="Age" inputClassName="form-control" className="mb-3" />\n\n        <BsFormDate<FormValues> required name="dateOfBirth" label="Date of Birth" inputClassName="form-control" className="mb-3" />\n\n        <BsFormDate<FormValues> required type="datetime-local" name="expiresAt" label="Expires at" inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required type="tel" name="phone" label="Phone number" inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required as="select" name="gender" label="Gender" inputClassName="form-select" className="mb-3">\n          <option value="">Please select</option>\n          <option value="invalid">Invalid option</option>\n          {Object.entries(GenderLabels).map(([value, label]) => <option key={value} value={value}>\n              {label}\n            </option>)}\n        </BsFormInput>\n\n        <BsFormCheckbox<FormValues> name="archived" label="Archived" className="mb-3" />\n\n        <ErrorMessage error={submitError} />\n\n        <Button variant="primary" type="submit" disabled={isSubmitting}>\n          {isSubmitting ? <Loading colour="light" size="sm" /> : \'Submit\'}\n        </Button>\n      </form>\n    </FormProvider>;\n};\nexport default ({\n  title: \'Components/CreateUpdateForm\',\n  component: CreateUpdateForm,\n  args: {\n    onSubmit: input => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          \n          alert(`Successfully submitted with input: \\n${JSON.stringify(input, null, 2)}`);\n          resolve({\n            name: input.name,\n            age: input.age,\n            dateOfBirth: input.dateOfBirth,\n            expiresAt: input.expiresAt,\n            phone: input.phone,\n            archived: input.archived,\n            company: input.company,\n            gender: input.gender,\n            registered: \'timestamp\',\n            id: \'id\'\n          });\n        }, 500);\n      });\n    }\n  }\n} as Meta<typeof CreateUpdateForm>);\nCreateUpdateForm.parameters = {\n  ...CreateUpdateForm.parameters,\n  docs: {\n    ...CreateUpdateForm.parameters?.docs,\n    source: {\n      originalSource: "({\\n  customer,\\n  onSubmit\\n}) => {\\n  const [loadError, setLoadError] = useState<Error | null>(null);\\n  const [submitError, setSubmitError] = useState<Error | null>(null);\\n  const defaultValues: FormValues = useMemoOnce(() => {\\n    if (!customer) {\\n      return {\\n        ...initialValues\\n      };\\n    }\\n\\n    // Try and convert the values, if it fails then show the error & just parse what we can.\\n    try {\\n      return fragmentToValues(customer);\\n    } catch (err) {\\n      setLoadError(new Error(\'There were problems with loading some initial values\', {\\n        cause: err\\n      }));\\n      return fragmentToValues(customer, {\\n        ignoreErrors: true\\n      });\\n    }\\n  });\\n  const formMethods = useForm<FormValues>({\\n    resolver: yupResolver(validationSchema),\\n    defaultValues\\n  });\\n  const {\\n    handleSubmit,\\n    formState: {\\n      isSubmitting\\n    },\\n    reset\\n  } = formMethods;\\n  return <FormProvider {...formMethods}>\\n      <form\\n    // We are validating using yup so we don\'t want HTML validation get in our way.\\n    // e.g. setting type=\\"email\\" or required would trigger HTML validation.\\n    noValidate onSubmit={handleSubmit(async values => {\\n      // Reset error every submit.\\n      setSubmitError(null);\\n      await onSubmit(valuesToInput(values)).catch(err => {\\n        // Wrap save error explicitly.\\n        throw new Error(\'Failed to save values\', {\\n          cause: err\\n        });\\n      }).then(res => {\\n        // Reset the \'default values\' to the newly saved values if save succeeded.\\n        try {\\n          reset(fragmentToValues(res));\\n        } catch (err) {\\n          // Fallback to resetting the defaults to the submitted values.\\n          reset(values);\\n          throw new Error(\'Save successful but response was invalid\', {\\n            cause: err\\n          });\\n        }\\n      }).catch(setSubmitError);\\n    })}>\\n        <PreventDirtyFormNavigate />\\n        <ErrorMessage error={loadError} />\\n\\n        <BsFormInput<FormValues> required type=\\"text\\" name=\\"name\\" label=\\"Name\\" helpText=\\"Just some help text.\\" inputClassName=\\"form-control\\" className=\\"mb-3\\" />\\n\\n        <BsFormInput<FormValues> required type=\\"text\\" name=\\"company\\" label=\\"Company\\" inputClassName=\\"form-control\\" className=\\"mb-3\\" />\\n\\n        <BsFormInput<FormValues> required\\n      // We use a \'tel\' for numbers so that mobile gets the numpad, it has no difference vs text on desktop.\\n      type=\\"tel\\" name=\\"age\\" label=\\"Age\\" inputClassName=\\"form-control\\" className=\\"mb-3\\" />\\n\\n        <BsFormDate<FormValues> required name=\\"dateOfBirth\\" label=\\"Date of Birth\\" inputClassName=\\"form-control\\" className=\\"mb-3\\" />\\n\\n        <BsFormDate<FormValues> required type=\\"datetime-local\\" name=\\"expiresAt\\" label=\\"Expires at\\" inputClassName=\\"form-control\\" className=\\"mb-3\\" />\\n\\n        <BsFormInput<FormValues> required type=\\"tel\\" name=\\"phone\\" label=\\"Phone number\\" inputClassName=\\"form-control\\" className=\\"mb-3\\" />\\n\\n        <BsFormInput<FormValues> required as=\\"select\\" name=\\"gender\\" label=\\"Gender\\" inputClassName=\\"form-select\\" className=\\"mb-3\\">\\n          <option value=\\"\\">Please select</option>\\n          <option value=\\"invalid\\">Invalid option</option>\\n          {Object.entries(GenderLabels).map(([value, label]) => <option key={value} value={value}>\\n              {label}\\n            </option>)}\\n        </BsFormInput>\\n\\n        <BsFormCheckbox<FormValues> name=\\"archived\\" label=\\"Archived\\" className=\\"mb-3\\" />\\n\\n        <ErrorMessage error={submitError} />\\n\\n        <Button variant=\\"primary\\" type=\\"submit\\" disabled={isSubmitting}>\\n          {isSubmitting ? <Loading colour=\\"light\\" size=\\"sm\\" /> : \'Submit\'}\\n        </Button>\\n      </form>\\n    </FormProvider>;\\n}",\n      ...CreateUpdateForm.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"create-update-form":{startLoc:{col:59,line:120},endLoc:{col:1,line:215},startBody:{col:59,line:120},endBody:{col:1,line:215}}}}},title:"Components/CreateUpdateForm",component:CreateUpdateForm,args:{onSubmit:input=>new Promise((resolve=>{setTimeout((()=>{alert(`Successfully submitted with input: \n${JSON.stringify(input,null,2)}`),resolve({name:input.name,age:input.age,dateOfBirth:input.dateOfBirth,expiresAt:input.expiresAt,phone:input.phone,archived:input.archived,company:input.company,gender:input.gender,registered:"timestamp",id:"id"})}),500)}))}};CreateUpdateForm.parameters={...CreateUpdateForm.parameters,docs:{...CreateUpdateForm.parameters?.docs,source:{originalSource:'({\n  customer,\n  onSubmit\n}) => {\n  const [loadError, setLoadError] = useState<Error | null>(null);\n  const [submitError, setSubmitError] = useState<Error | null>(null);\n  const defaultValues: FormValues = useMemoOnce(() => {\n    if (!customer) {\n      return {\n        ...initialValues\n      };\n    }\n\n    // Try and convert the values, if it fails then show the error & just parse what we can.\n    try {\n      return fragmentToValues(customer);\n    } catch (err) {\n      setLoadError(new Error(\'There were problems with loading some initial values\', {\n        cause: err\n      }));\n      return fragmentToValues(customer, {\n        ignoreErrors: true\n      });\n    }\n  });\n  const formMethods = useForm<FormValues>({\n    resolver: yupResolver(validationSchema),\n    defaultValues\n  });\n  const {\n    handleSubmit,\n    formState: {\n      isSubmitting\n    },\n    reset\n  } = formMethods;\n  return <FormProvider {...formMethods}>\n      <form\n    // We are validating using yup so we don\'t want HTML validation get in our way.\n    // e.g. setting type="email" or required would trigger HTML validation.\n    noValidate onSubmit={handleSubmit(async values => {\n      // Reset error every submit.\n      setSubmitError(null);\n      await onSubmit(valuesToInput(values)).catch(err => {\n        // Wrap save error explicitly.\n        throw new Error(\'Failed to save values\', {\n          cause: err\n        });\n      }).then(res => {\n        // Reset the \'default values\' to the newly saved values if save succeeded.\n        try {\n          reset(fragmentToValues(res));\n        } catch (err) {\n          // Fallback to resetting the defaults to the submitted values.\n          reset(values);\n          throw new Error(\'Save successful but response was invalid\', {\n            cause: err\n          });\n        }\n      }).catch(setSubmitError);\n    })}>\n        <PreventDirtyFormNavigate />\n        <ErrorMessage error={loadError} />\n\n        <BsFormInput<FormValues> required type="text" name="name" label="Name" helpText="Just some help text." inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required type="text" name="company" label="Company" inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required\n      // We use a \'tel\' for numbers so that mobile gets the numpad, it has no difference vs text on desktop.\n      type="tel" name="age" label="Age" inputClassName="form-control" className="mb-3" />\n\n        <BsFormDate<FormValues> required name="dateOfBirth" label="Date of Birth" inputClassName="form-control" className="mb-3" />\n\n        <BsFormDate<FormValues> required type="datetime-local" name="expiresAt" label="Expires at" inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required type="tel" name="phone" label="Phone number" inputClassName="form-control" className="mb-3" />\n\n        <BsFormInput<FormValues> required as="select" name="gender" label="Gender" inputClassName="form-select" className="mb-3">\n          <option value="">Please select</option>\n          <option value="invalid">Invalid option</option>\n          {Object.entries(GenderLabels).map(([value, label]) => <option key={value} value={value}>\n              {label}\n            </option>)}\n        </BsFormInput>\n\n        <BsFormCheckbox<FormValues> name="archived" label="Archived" className="mb-3" />\n\n        <ErrorMessage error={submitError} />\n\n        <Button variant="primary" type="submit" disabled={isSubmitting}>\n          {isSubmitting ? <Loading colour="light" size="sm" /> : \'Submit\'}\n        </Button>\n      </form>\n    </FormProvider>;\n}',...CreateUpdateForm.parameters?.docs?.source}}};const __namedExportsOrder=["CreateUpdateForm"];try{CreateUpdateForm.displayName="CreateUpdateForm",CreateUpdateForm.__docgenInfo={description:"",displayName:"CreateUpdateForm",props:{customer:{defaultValue:null,description:"",name:"customer",required:!0,type:{name:"CustomerFragment | null"}},onSubmit:{defaultValue:null,description:"",name:"onSubmit",required:!0,type:{name:"(input: CustomerInput) => Promise<CustomerFragment>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/components/CreateUpdateForm.stories.tsx#CreateUpdateForm"]={docgenInfo:CreateUpdateForm.__docgenInfo,name:"CreateUpdateForm",path:"src/stories/components/CreateUpdateForm.stories.tsx#CreateUpdateForm"})}catch(__react_docgen_typescript_loader_error){}},"./src/stories/mocks/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Eo:()=>MOCK_OPTIONS,Y0:()=>Gender,Yu:()=>getData,pG:()=>GenderLabels});var _mockData_json__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/stories/mocks/mockData.json");const getData=async vars=>new Promise((resolve=>{setTimeout((()=>{const data=_mockData_json__WEBPACK_IMPORTED_MODULE_0__.filter((item=>vars.where?.name?item.name.toLocaleLowerCase().includes(vars.where.name.trim().toLocaleLowerCase()):!vars.where?.id||item.id===vars.where.id)),offset=vars.paging.offset||0,results=data.slice(offset,offset+vars.paging.limit);resolve({total:data.length,results})}),500*Math.random()+50)}));let Gender=function(Gender){return Gender.female="female",Gender.male="male",Gender.other="other",Gender}({});const GenderLabels={male:"Male",female:"Female",other:"Other"},MOCK_OPTIONS=[{label:"My first option",value:"1"},{label:"My second option",value:"2"},{label:"My third option",value:"3"},{label:"My fourth option",value:"4"},{label:"My fifth option",value:"5"},{label:"My sixth option",value:"6"},{label:"My seventh option",value:"7"},{label:"My eighth option",value:"8"},{label:"My ninth option",value:"9"},{label:"My tenth option",value:"10"},{label:"My eleventh option",value:"11"},{label:"My twelfth option",value:"12"},{label:"My thirteenth option",value:"13"},{label:"My fourteenth option",value:"14"},{label:"My fifteenth option",value:"15"},{label:"My sixteenth option",value:"16"},{label:"My seventeenth option",value:"17"},{label:"My eighteenth option",value:"18"},{label:"My nineteenth option",value:"19"},{label:"My twentieth option",value:"20"}]},"./src/stories/mocks/mockData.json":module=>{module.exports=JSON.parse('[{"id":"7ebd6741-fc7f-4823-a6be-64cfe0d8af16","age":35,"name":"Gibson Blackwell","gender":"male","company":"ZILLAR","email":"gibsonblackwell@zillar.com","phone":"+44 7921469344","registered":"2018-09-23T07:46:00 -01:00"},{"id":"58219a6f-58bb-4e07-8b15-db12c0611178","age":28,"name":"Alberta Griffin","gender":"female","company":"CUBICIDE","email":"albertagriffin@cubicide.com","phone":"+44 7834501244","registered":"2021-05-28T12:10:53 -01:00"},{"id":"51b6753c-840d-42a5-af13-0a8cb9338c9c","age":36,"name":"Rowena Bryan","gender":"female","company":"ORBIFLEX","email":"rowenabryan@orbiflex.com","phone":"+44 7802523369","registered":"2016-05-14T07:33:42 -01:00"},{"id":"52b53fa7-ad26-4a05-a2f3-943ca0df7cb4","age":21,"name":"Tracey Ballard","gender":"female","company":"TROPOLIS","email":"traceyballard@tropolis.com","phone":"+44 7923542382","registered":"2021-11-16T02:29:21 -00:00"},{"id":"2019f676-dab5-4e31-ab3c-d9966cfb67a8","age":40,"name":"Snider Watkins","gender":"male","company":"KROG","email":"sniderwatkins@krog.com","phone":"+44 7969469213","registered":"2018-04-05T08:55:46 -01:00"},{"id":"c01aa83e-30e3-4562-83eb-9ed3fb9593a8","age":25,"name":"Chambers Dawson","gender":"male","company":"EMPIRICA","email":"chambersdawson@empirica.com","phone":"+44 7974455366","registered":"2020-10-28T08:19:02 -00:00"},{"id":"143f65d0-a160-444b-b411-ec4f5713d8d9","age":30,"name":"Amelia Vega","gender":"female","company":"NEBULEAN","email":"ameliavega@nebulean.com","phone":"+44 7892412303","registered":"2016-04-22T10:15:09 -01:00"},{"id":"8c551732-67ab-4eb1-81a7-4e5d53c12471","age":22,"name":"Jocelyn Collier","gender":"female","company":"EARBANG","email":"jocelyncollier@earbang.com","phone":"+44 7828571316","registered":"2016-12-21T06:40:27 -00:00"},{"id":"89cff3cf-696a-4be6-94af-37999bbafaef","age":35,"name":"Hattie Mcconnell","gender":"female","company":"XIXAN","email":"hattiemcconnell@xixan.com","phone":"+44 7840414243","registered":"2016-11-04T03:24:29 -00:00"},{"id":"4909d82e-4965-4f55-b97d-31e0ccf2fbc0","age":25,"name":"Grace Mccormick","gender":"female","company":"ZIPAK","email":"gracemccormick@zipak.com","phone":"+44 7810434369","registered":"2014-02-23T11:15:43 -00:00"},{"id":"300bb579-1327-40a7-abec-205c6084b564","age":21,"name":"Lydia Richmond","gender":"female","company":"SCHOOLIO","email":"lydiarichmond@schoolio.com","phone":"+44 7837511281","registered":"2020-06-27T04:56:46 -01:00"},{"id":"572505c2-bb7c-454b-ac16-6b56b1810f5d","age":25,"name":"Alford Compton","gender":"male","company":"CABLAM","email":"alfordcompton@cablam.com","phone":"+44 7815487276","registered":"2022-12-15T08:32:35 -00:00"},{"id":"09b165c3-e643-4a1d-accb-b0f0c57b9022","age":36,"name":"Fitzgerald Beck","gender":"male","company":"FARMAGE","email":"fitzgeraldbeck@farmage.com","phone":"+44 7959546253","registered":"2014-02-19T10:30:08 -00:00"},{"id":"4e1f9603-ceb7-4388-ac72-11c7c93e03c6","age":25,"name":"Norma Monroe","gender":"female","company":"PETIGEMS","email":"normamonroe@petigems.com","phone":"+44 7919578254","registered":"2020-02-08T08:41:14 -00:00"},{"id":"2d30a00c-a037-40a6-bc11-b25e9cfde206","age":22,"name":"Autumn Moody","gender":"female","company":"BUZZMAKER","email":"autumnmoody@buzzmaker.com","phone":"+44 7997518318","registered":"2022-06-18T05:18:28 -01:00"},{"id":"827db416-0125-4d61-a2e8-9b3675e77eee","age":39,"name":"Jeannie Ruiz","gender":"female","company":"COMTREK","email":"jeannieruiz@comtrek.com","phone":"+44 7955419220","registered":"2021-05-19T10:59:00 -01:00"},{"id":"c50e3a36-9b9a-4fe8-aaf9-1e577c74f6f4","age":40,"name":"Allen Anderson","gender":"male","company":"LUNCHPAD","email":"allenanderson@lunchpad.com","phone":"+44 7896509325","registered":"2017-10-24T02:12:30 -01:00"},{"id":"5fcfb0b6-3562-45e9-b792-91306821a6b5","age":38,"name":"Keith Dodson","gender":"male","company":"INCUBUS","email":"keithdodson@incubus.com","phone":"+44 7992503209","registered":"2019-06-30T02:14:06 -01:00"},{"id":"aae7b67d-45d3-49f8-8476-1dd4e5ccb1f4","age":31,"name":"Andrea Carey","gender":"female","company":"GEEKETRON","email":"andreacarey@geeketron.com","phone":"+44 7804459369","registered":"2017-11-16T06:21:35 -00:00"},{"id":"69837949-34c2-451b-8ed5-6572a877c7e0","age":35,"name":"Mitchell Nunez","gender":"male","company":"TALAE","email":"mitchellnunez@talae.com","phone":"+44 7934416200","registered":"2022-04-08T02:56:08 -01:00"},{"id":"d0757052-86af-4538-9a3a-15e524acb412","age":28,"name":"Short Mercado","gender":"male","company":"DYMI","email":"shortmercado@dymi.com","phone":"+44 7971553304","registered":"2017-01-10T09:04:28 -00:00"},{"id":"44f292f3-e1ef-4a8b-82df-3e1119581a6f","age":38,"name":"Valentine Stevenson","gender":"male","company":"MULTIFLEX","email":"valentinestevenson@multiflex.com","phone":"+44 7863508213","registered":"2019-06-12T07:41:14 -01:00"},{"id":"ce20bcc5-4205-488c-b084-a23427c3fcbb","age":35,"name":"Skinner Holder","gender":"male","company":"QOT","email":"skinnerholder@qot.com","phone":"+44 7942516365","registered":"2019-10-13T08:16:48 -01:00"},{"id":"b1d8649e-88f9-4b4b-ad32-fe35f49119f2","age":26,"name":"Summers Holt","gender":"male","company":"DARWINIUM","email":"summersholt@darwinium.com","phone":"+44 7940512223","registered":"2022-05-05T01:24:00 -01:00"},{"id":"68641fe4-077a-4d0c-be0f-2cf60e0bf0c8","age":20,"name":"Jensen Newton","gender":"male","company":"ENORMO","email":"jensennewton@enormo.com","phone":"+44 7854556362","registered":"2021-12-29T08:16:37 -00:00"},{"id":"1e0016c7-fdd3-4980-8a8b-761d8f61b8c7","age":32,"name":"Richards Ratliff","gender":"male","company":"OBONES","email":"richardsratliff@obones.com","phone":"+44 7806599332","registered":"2017-11-13T12:28:21 -00:00"},{"id":"12f81e70-7a25-4d97-a778-3a14c16b9e38","age":38,"name":"Nielsen Moran","gender":"male","company":"ENTHAZE","email":"nielsenmoran@enthaze.com","phone":"+44 7899450358","registered":"2021-11-20T02:01:07 -00:00"},{"id":"75f48282-5caf-4793-8d06-5c70a8efbe42","age":25,"name":"Alvarado Marsh","gender":"male","company":"CORPULSE","email":"alvaradomarsh@corpulse.com","phone":"+44 7968413224","registered":"2021-02-24T03:15:38 -00:00"},{"id":"82ce402a-1a30-4a74-9384-7e074c1398e9","age":32,"name":"Saundra Landry","gender":"female","company":"ZOLAR","email":"saundralandry@zolar.com","phone":"+44 7819514210","registered":"2020-05-19T10:04:11 -01:00"},{"id":"5cdf739e-cfcc-41f1-9798-dfb13c679b48","age":20,"name":"Stone Baxter","gender":"male","company":"BLANET","email":"stonebaxter@blanet.com","phone":"+44 7921588206","registered":"2018-04-03T03:33:59 -01:00"},{"id":"a239741e-283e-4bf9-ae3a-8f8f3fa3f56d","age":21,"name":"Hays Porter","gender":"male","company":"ADORNICA","email":"haysporter@adornica.com","phone":"+44 7832537240","registered":"2023-07-12T09:14:05 -01:00"},{"id":"288c4024-fbb4-4086-890e-0454ec78cfba","age":20,"name":"Glenn House","gender":"male","company":"QIAO","email":"glennhouse@qiao.com","phone":"+44 7884573268","registered":"2022-10-05T10:57:19 -01:00"},{"id":"efcd8943-9a8d-44cf-b61a-f190426cdbdd","age":25,"name":"Clara Norman","gender":"female","company":"ROUGHIES","email":"claranorman@roughies.com","phone":"+44 7801573388","registered":"2016-03-18T05:42:17 -00:00"},{"id":"b4e6ff8a-89f4-4d9c-a590-03a13b553262","age":25,"name":"Long Ray","gender":"male","company":"NUTRALAB","email":"longray@nutralab.com","phone":"+44 7972449346","registered":"2022-07-31T07:43:26 -01:00"},{"id":"6c2de980-df03-44c4-acf6-c9daf28744c1","age":26,"name":"Estelle Salinas","gender":"female","company":"ULTRASURE","email":"estellesalinas@ultrasure.com","phone":"+44 7839600204","registered":"2018-06-12T06:18:58 -01:00"},{"id":"e93b0ba7-e378-4502-b9fe-25b7c7c0d5e2","age":32,"name":"Munoz Pearson","gender":"male","company":"ZILLAN","email":"munozpearson@zillan.com","phone":"+44 7838490309","registered":"2022-11-11T01:27:02 -00:00"},{"id":"932ff67e-e9ac-42ae-b844-9db80d6b70ae","age":34,"name":"Espinoza Wilkins","gender":"male","company":"XURBAN","email":"espinozawilkins@xurban.com","phone":"+44 7956460381","registered":"2017-05-08T04:52:17 -01:00"},{"id":"3bae51b5-d989-4d28-8fd8-76fcc2251473","age":23,"name":"Tania Fields","gender":"female","company":"XTH","email":"taniafields@xth.com","phone":"+44 7884559327","registered":"2018-08-09T07:02:23 -01:00"},{"id":"d6cfa935-145a-4d03-b69b-f69358ca80c3","age":27,"name":"Johnson Pugh","gender":"male","company":"LYRIA","email":"johnsonpugh@lyria.com","phone":"+44 7936507340","registered":"2014-10-17T05:36:47 -01:00"},{"id":"2fcc679e-3a42-4bc7-b01a-8ac912295870","age":38,"name":"Boone Torres","gender":"male","company":"MAGNAFONE","email":"boonetorres@magnafone.com","phone":"+44 7899512276","registered":"2014-11-06T08:31:22 -00:00"},{"id":"d32482f9-a8ab-4e28-b952-2bdaf550986f","age":40,"name":"Mcclure Barrera","gender":"male","company":"DIGIFAD","email":"mcclurebarrera@digifad.com","phone":"+44 7902451214","registered":"2019-04-26T10:54:54 -01:00"},{"id":"3f68fe96-eb1f-418e-b381-8ce20b7ce5f8","age":40,"name":"Baird Nash","gender":"male","company":"SPACEWAX","email":"bairdnash@spacewax.com","phone":"+44 7830495274","registered":"2015-07-26T06:02:30 -01:00"},{"id":"f0fc59f4-4eac-43b2-a1ce-01440bc3dd78","age":28,"name":"King Mendoza","gender":"male","company":"AUTOGRATE","email":"kingmendoza@autograte.com","phone":"+44 7981482245","registered":"2019-05-19T12:53:00 -01:00"},{"id":"b9466ffd-2062-4997-b5e2-4e14b3216f38","age":39,"name":"Shelby Tyson","gender":"female","company":"EDECINE","email":"shelbytyson@edecine.com","phone":"+44 7941508385","registered":"2021-05-10T02:04:53 -01:00"},{"id":"56613e81-bb9c-420b-8eca-17a7ea9c0741","age":38,"name":"Marie Sellers","gender":"female","company":"SLAMBDA","email":"mariesellers@slambda.com","phone":"+44 7906539252","registered":"2018-12-04T10:16:02 -00:00"},{"id":"e9fc470e-813a-4a6a-8bc3-6f27e3fd66e3","age":26,"name":"Wilkerson Schneider","gender":"male","company":"PROTODYNE","email":"wilkersonschneider@protodyne.com","phone":"+44 7858444201","registered":"2017-02-03T01:08:22 -00:00"},{"id":"3af6c678-621f-4d98-b18a-8d36730535ac","age":23,"name":"Stacey Olsen","gender":"female","company":"TUBESYS","email":"staceyolsen@tubesys.com","phone":"+44 7986453350","registered":"2014-01-07T09:07:18 -00:00"},{"id":"8648880d-073d-4106-9fdb-10c7ffee1135","age":31,"name":"Pearson Morin","gender":"male","company":"ENOMEN","email":"pearsonmorin@enomen.com","phone":"+44 7874538297","registered":"2021-02-10T12:48:14 -00:00"},{"id":"eeb76a80-2e70-46c8-a430-679a5c3da301","age":39,"name":"Parks Cunningham","gender":"male","company":"QUILCH","email":"parkscunningham@quilch.com","phone":"+44 7851533262","registered":"2023-01-03T12:34:01 -00:00"},{"id":"651729cc-33ec-46f3-8037-0c515faee695","age":38,"name":"Angelia Fletcher","gender":"female","company":"PARAGONIA","email":"angeliafletcher@paragonia.com","phone":"+44 7941548291","registered":"2018-07-06T07:15:00 -01:00"}]')}}]);