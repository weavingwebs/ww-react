"use strict";(self.webpackChunk_weavingwebs_ww_react=self.webpackChunk_weavingwebs_ww_react||[]).push([[695],{"./src/stories/hooks/useCopyToClipboard.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{UseCopyToClipboardStory:()=>UseCopyToClipboardStory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_icons_fa6__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react-icons/fa6/index.esm.js"),react_bootstrap_OverlayTrigger__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react-bootstrap/esm/OverlayTrigger.js"),react_bootstrap_Tooltip__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react-bootstrap/esm/Tooltip.js"),_hooks__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/hooks/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const UseCopyToClipboardStory=()=>{const{hasCopiedToClipboard,copyToClipboard,resetCopiedStatus}=(0,_hooks__WEBPACK_IMPORTED_MODULE_0__.m9)();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_bootstrap_OverlayTrigger__WEBPACK_IMPORTED_MODULE_2__.Z,{show:hasCopiedToClipboard,onToggle:resetCopiedStatus,placement:"right",overlay:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_bootstrap_Tooltip__WEBPACK_IMPORTED_MODULE_3__.Z,{id:"tooltip-copied",children:"Copied!"}),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("button",{type:"button",className:"btn btn-primary",title:"Copy to clipboard",onClick:()=>copyToClipboard("This is some text to copy"),children:["This is some text to copy"," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_icons_fa6__WEBPACK_IMPORTED_MODULE_4__.esY,{className:"ms-2",size:14})]})})})};UseCopyToClipboardStory.displayName="UseCopyToClipboardStory";const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:'import { Meta } from \'@storybook/react\';\nimport { FC } from \'react\';\nimport { FaCopy } from \'react-icons/fa6\';\nimport OverlayTrigger from \'react-bootstrap/OverlayTrigger\';\nimport Tooltip from \'react-bootstrap/Tooltip\';\nimport { useCopyToClipboard } from \'../../hooks\';\nconst TEXT_TO_COPY = \'This is some text to copy\';\nexport const UseCopyToClipboardStory: FC = () => {\n  const {\n    hasCopiedToClipboard,\n    copyToClipboard,\n    resetCopiedStatus\n  } = useCopyToClipboard();\n  return <div>\n      <OverlayTrigger show={hasCopiedToClipboard} onToggle={resetCopiedStatus} placement="right" overlay={<Tooltip id="tooltip-copied">Copied!</Tooltip>}>\n        {/* @todo: This doesn\'t work with a <Button> component, might be due to it not accepting ref. */}\n        <button type="button" className="btn btn-primary" title="Copy to clipboard" onClick={() => copyToClipboard(TEXT_TO_COPY)}>\n          {TEXT_TO_COPY} <FaCopy className="ms-2" size={14} />\n        </button>\n      </OverlayTrigger>\n    </div>;\n};\nconst meta: Meta = {\n  title: \'Hooks/useCopyToClipboard\',\n  component: UseCopyToClipboardStory\n};\nexport default meta;\nUseCopyToClipboardStory.parameters = {\n  ...UseCopyToClipboardStory.parameters,\n  docs: {\n    ...UseCopyToClipboardStory.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const {\\n    hasCopiedToClipboard,\\n    copyToClipboard,\\n    resetCopiedStatus\\n  } = useCopyToClipboard();\\n  return <div>\\n      <OverlayTrigger show={hasCopiedToClipboard} onToggle={resetCopiedStatus} placement=\\"right\\" overlay={<Tooltip id=\\"tooltip-copied\\">Copied!</Tooltip>}>\\n        {/* @todo: This doesn\'t work with a <Button> component, might be due to it not accepting ref. */}\\n        <button type=\\"button\\" className=\\"btn btn-primary\\" title=\\"Copy to clipboard\\" onClick={() => copyToClipboard(TEXT_TO_COPY)}>\\n          {TEXT_TO_COPY} <FaCopy className=\\"ms-2\\" size={14} />\\n        </button>\\n      </OverlayTrigger>\\n    </div>;\\n}",\n      ...UseCopyToClipboardStory.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"use-copy-to-clipboard-story":{startLoc:{col:43,line:8},endLoc:{col:1,line:22},startBody:{col:43,line:8},endBody:{col:1,line:22}}}}},title:"Hooks/useCopyToClipboard",component:UseCopyToClipboardStory};UseCopyToClipboardStory.parameters={...UseCopyToClipboardStory.parameters,docs:{...UseCopyToClipboardStory.parameters?.docs,source:{originalSource:'() => {\n  const {\n    hasCopiedToClipboard,\n    copyToClipboard,\n    resetCopiedStatus\n  } = useCopyToClipboard();\n  return <div>\n      <OverlayTrigger show={hasCopiedToClipboard} onToggle={resetCopiedStatus} placement="right" overlay={<Tooltip id="tooltip-copied">Copied!</Tooltip>}>\n        {/* @todo: This doesn\'t work with a <Button> component, might be due to it not accepting ref. */}\n        <button type="button" className="btn btn-primary" title="Copy to clipboard" onClick={() => copyToClipboard(TEXT_TO_COPY)}>\n          {TEXT_TO_COPY} <FaCopy className="ms-2" size={14} />\n        </button>\n      </OverlayTrigger>\n    </div>;\n}',...UseCopyToClipboardStory.parameters?.docs?.source}}};const __namedExportsOrder=["UseCopyToClipboardStory"];try{UseCopyToClipboardStory.displayName="UseCopyToClipboardStory",UseCopyToClipboardStory.__docgenInfo={description:"",displayName:"UseCopyToClipboardStory",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/hooks/useCopyToClipboard.stories.tsx#UseCopyToClipboardStory"]={docgenInfo:UseCopyToClipboardStory.__docgenInfo,name:"UseCopyToClipboardStory",path:"src/stories/hooks/useCopyToClipboard.stories.tsx#UseCopyToClipboardStory"})}catch(__react_docgen_typescript_loader_error){}},"./src/hooks/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{r5:()=>useAsync,m9:()=>useCopyToClipboard,dd:()=>useModal,YH:()=>usePager});var react=__webpack_require__("./node_modules/react/index.js");const pagerReducer=(state,action)=>{const newState={...state};switch(action.type){case"prev":newState.currentPage=state.currentPage-1;break;case"next":newState.currentPage=state.currentPage+1;break;case"update":newState.total=action.total;break;case"reset":newState.currentPage=1;break;case"updateCurrentPage":newState.currentPage=action.page;break;case"updateItemsPerPage":newState.itemsPerPage=action.itemsPerPage,newState.currentPage=1;break;default:throw new Error("unhandled case")}return newState.isLastPage=newState.currentPage*newState.itemsPerPage>=newState.total,newState},usePager=(itemsPerPageDefault,initialTotal=0)=>{const[state,dispatch]=react.useReducer(pagerReducer,{itemsPerPage:itemsPerPageDefault,total:initialTotal,currentPage:1,isLastPage:!1}),{total,currentPage,isLastPage,itemsPerPage}=state,paging=(0,react.useMemo)((()=>({limit:itemsPerPage,offset:(currentPage-1)*itemsPerPage})),[currentPage,itemsPerPage]),totalPages=(0,react.useMemo)((()=>Math.ceil(total/itemsPerPage)),[total,itemsPerPage]);return{total,totalPages,currentPage,isLastPage,itemsPerPage,dispatch,paging}};__webpack_require__("./src/hooks/useMemoOnce.ts");const modalReducer=(s,a)=>{switch(a.type){case"open":return{...s,isOpen:!0};case"close":return{...s,isOpen:!1};default:throw new Error(`invalid action '${a.type}'`)}},useModal=()=>{const[state,dispatch]=(0,react.useReducer)(modalReducer,{isOpen:!1});return{...state,onOpen:(0,react.useCallback)((()=>dispatch({type:"open"})),[]),onClose:(0,react.useCallback)((()=>dispatch({type:"close"})),[])}};__webpack_require__("./src/hooks/useConfirmModal.ts");function loadingReducer(s,a){switch(a.type){case"start_loading":return{...s,isLoading:!0,error:null};case"on_error":return{...s,result:null,isLoading:!1,error:a.error};case"set_error":return{...s,error:a.error};case"success":return{...s,isLoading:!1,result:a.result};case"reset":return{error:null,isLoading:!1,result:null};default:throw new Error(`unhandled case: ${a.type}`)}}function useAsync(defaultState){const[state,dispatch]=(0,react.useReducer)(loadingReducer,{...defaultState,error:null});return{...state,runAsync:(0,react.useCallback)((fn=>(dispatch({type:"start_loading"}),fn().then((result=>(dispatch({type:"success",result}),{result,error:null}))).catch((error=>(dispatch({type:"on_error",error}),{result:null,error}))))),[]),resetAsync:(0,react.useCallback)((()=>{dispatch({type:"reset"})}),[])}}const useCopyToClipboard=()=>{const[hasCopiedToClipboard,setHasCopiedToClipboard]=(0,react.useState)(!1);return{hasCopiedToClipboard,copyToClipboard:text=>{(async text=>{if(void 0===navigator.clipboard)throw new Error("Your browser does not support this action. Please upgrade to a modern browser before trying again.");return navigator.clipboard.writeText(text)})(text).then((()=>setHasCopiedToClipboard(!0))).catch((err=>{console.error(err),alert(`Sorry, this action has failed. ${err.message}.\nAttempting to copy: ${text}`)}))},resetCopiedStatus:()=>setHasCopiedToClipboard(!1)}}},"./src/hooks/useConfirmModal.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>useConfirmModal});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const DEFAULT={isOpen:!1,config:{onConfirm:async()=>{throw new Error("onConfirm is not set")}}},confirmModalReducer=(s,a)=>{switch(a.type){case"open":return{config:a.config,isOpen:!0};case"close":return{...DEFAULT};default:throw new Error(`invalid action '${a.type}'`)}},useConfirmModal=()=>{const[state,dispatch]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(confirmModalReducer,DEFAULT),showConfirm=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((config=>{dispatch({type:"open",config})}),[dispatch]),onCancel=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((()=>{dispatch({type:"close"})}),[dispatch]);return{...state.config,isOpen:state.isOpen,showConfirm,onCancel}}},"./src/hooks/useMemoOnce.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>useMemoOnce});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function useMemoOnce(fn){return(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(fn,[])}}}]);